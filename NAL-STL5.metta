;; UTILITIES ;;

(= (TupleConcat $Ev1 $Ev2) 
   (collapse (superpose ((superpose $Ev1)
                         (superpose $Ev2)))))

(= (any $Z)
   (not (== () $Z)))

(= (range $K $N)
   (If (< $K $N)
       (TupleConcat ($K) (range (+ $K 1) $N)) ()))

(= (firstTrue $ψ from $a to $b)
   (If (> $a $b)
       none
       (If ($ψ $a)
           $a
           (firstTrue $ψ from (+ 1 $a) to $b))))

;; PROPOSITIONAL LOGIC ;;

(= (∧ $P $Q)
   (and $P $Q))

(= (v $P $Q)
   (or $P $Q))

(= (¬ $P)
   (not $P))

(= (⟹ $P $Q)
   (v ((¬ $P) $Q)))

(= (⟺ $P $Q)
   (∧ ($P ⟹ $Q) ($Q ⟹ $P)))

;; QUANTIFIED PREDICATES OVER INTERVALS ;;

(= (∀x $ϕ from $a to $b)
   (If (> $a $b)
       True
       (and ($ϕ $a) (∀x $ϕ from (+ $a 1) to $b))))

(= (∃x $ϕ from $a to $b)
   (If (> $a $b)
       False
       (or ($ϕ $a) (∃x $ϕ from (+ 1 $a) to $b))))

;count true
(= (Tx $ϕ from $a to $b)
   (If (> $a $b)
       ()
       (let $rest (Tx $ϕ from (+ 1 $a) to $b)
            (If ($ϕ $a)
                (TupleConcat ($a) $rest)
                $rest))))

(= (Fx $ϕ from $a to $b)
   (If (> $a $b)
       ()
       (let $rest (Fx $ϕ from (+ 1 $a) to $b)
            (If (not ($ϕ $a))
                (TupleConcat ($a) $rest)
                $rest))))

;; SIGNAL TEMPORAL LOGIC ;;

;globally
(= (□ $ϕ from $a to $b at $t)
   (∀x $ϕ from (+ $t $a) to (+ $t $b)))

;finally
(= (◊ $ϕ from $a to $b at $t)
   (∃x $ϕ from (+ $t $a) to (+ $t $b)))

;until
(= (𝒰 $ϕ $ψ from $a to $b at $t)
   (any (collapse (let* (($I (range (+ $t $a) (+ $t $b)))
                         ($y (superpose $I)))
                        (If (and ($ψ $y) (∀x $ϕ from $t to $y)) thing)))))

;; SIGNAL TEMPORAL NAL

; Temporal ops with NAL truth value

(= (Truth_w2TV $wp $w)
   ((/ $wp $w)
    (/ $w (+ $w 1))))

;globally
(= (□TV $ϕ from $a to $b at $t)
   ((Tx $ϕ from (+ $t $a) to (+ $t $b))
    (range (+ $t $a) (+ 1 (+ $t $b)))))

;finally
(= (◊TV $ϕ from $a to $b at $t)
   (let $ival (range (+ $t $a) (+ (+ $t $b) 1))
        (If (◊ $ϕ from $a to $b at $t)
            ($ival ())
            (range (+ $t $a) (+ 1 (+ $t $b))))))

;until
(= (𝒰TV $ϕ $ψ from $a to $b at $t)
   (let $ts (firstTrue $ψ from (+ $t $a) to (+ $t $b))
        (If (== $ts none)
            (() (range $t (+ (+ $t $b) 1))) ;all false from t till t+b
            ((TupleConcat (range (+ 1 $ts) (+ (+ $t $b) 1)) ;true from ts+1 to t+b
                          (Tx $ϕ from $t to $ts)) ;points where ϕ holds within t and ts-1
             (range $t (+ 1 (+ $t $b))))))) ;points where ϕ does not hold within t and ts

;; EXAMPLE ;;

(= (x $t) $t)
(= (ϕ $t) (< (x $t) 10))
(= (ψ $t) (< (x $t) 20))

;!(□ ϕ from 1 to 10 at 0)
;!(let* (($I (range 1 6))
;        ($t (superpose $I)))
;       (□ ϕ from 1 to 5 at $t))
;!(□ ϕ from 1 to 10 at 0)
;!(𝒰 ϕ ψ from 0 to 13 at 5)
;!(□ ϕ from 1 to 10 at 0)

;!(□TV ϕ from 1 to 10 at 0)
;!(◊TV ϕ from 1 to 10 at 0)
;!(𝒰TV ϕ ψ from 1 to 10 at 0)


(= (safe 0) True)
(= (A 0) True)
(= (B 0) False)
(= (C 0) False)
(= (safe 1) True)
(= (A 1) True)
(= (B 1) False)
(= (C 1) False)
(= (safe 2) True)
(= (A 2) True)
(= (B 2) False)
(= (C 2) False)
(= (safe 3) True)
(= (A 3) True)
(= (B 3) False)
(= (C 3) False)
(= (safe 4) True)
(= (A 4) True)
(= (B 4) False)
(= (C 4) False)
(= (safe 5) True)
(= (A 5) True)
(= (B 5) False)
(= (C 5) False)
(= (safe 6) True)
(= (A 6) True)
(= (B 6) False)
(= (C 6) False)
(= (safe 7) True)
(= (A 7) True)
(= (B 7) False)
(= (C 7) False)
(= (safe 8) True)
(= (A 8) True)
(= (B 8) False)
(= (C 8) False)
(= (safe 9) True)
(= (A 9) True)
(= (B 9) False)
(= (C 9) False)
(= (safe 10) True)
(= (A 10) True)
(= (B 10) False)
(= (C 10) False)
(= (safe 11) True)
(= (A 11) True)
(= (B 11) False)
(= (C 11) False)
(= (safe 12) True)
(= (A 12) True)
(= (B 12) False)
(= (C 12) False)
(= (safe 13) True)
(= (A 13) True)
(= (B 13) False)
(= (C 13) False)
(= (safe 14) True)
(= (A 14) True)
(= (B 14) False)
(= (C 14) False)
(= (safe 15) True)
(= (A 15) True)
(= (B 15) False)
(= (C 15) False)
(= (safe 16) True)
(= (A 16) True)
(= (B 16) False)
(= (C 16) False)
(= (safe 17) True)
(= (A 17) True)
(= (B 17) False)
(= (C 17) False)
(= (safe 18) True)
(= (A 18) True)
(= (B 18) False)
(= (C 18) False)
(= (safe 19) True)
(= (A 19) True)
(= (B 19) False)
(= (C 19) False)
(= (safe 20) True)
(= (A 20) True)
(= (B 20) False)
(= (C 20) False)
(= (safe 21) True)
(= (A 21) True)
(= (B 21) False)
(= (C 21) False)
(= (safe 22) True)
(= (A 22) True)
(= (B 22) False)
(= (C 22) False)
(= (safe 23) True)
(= (A 23) True)
(= (B 23) False)
(= (C 23) False)
(= (safe 24) True)
(= (A 24) True)
(= (B 24) False)
(= (C 24) False)
(= (safe 25) True)
(= (A 25) True)
(= (B 25) False)
(= (C 25) False)
(= (safe 26) True)
(= (A 26) True)
(= (B 26) False)
(= (C 26) False)
(= (safe 27) True)
(= (A 27) True)
(= (B 27) False)
(= (C 27) False)
(= (safe 28) True)
(= (A 28) True)
(= (B 28) False)
(= (C 28) False)
(= (safe 29) True)
(= (A 29) True)
(= (B 29) False)
(= (C 29) False)
(= (safe 30) True)
(= (A 30) True)
(= (B 30) False)
(= (C 30) False)
(= (safe 31) True)
(= (A 31) True)
(= (B 31) False)
(= (C 31) False)
(= (safe 32) True)
(= (A 32) True)
(= (B 32) False)
(= (C 32) False)
(= (safe 33) True)
(= (A 33) True)
(= (B 33) False)
(= (C 33) False)
(= (safe 34) True)
(= (A 34) True)
(= (B 34) False)
(= (C 34) False)
(= (safe 35) True)
(= (A 35) True)
(= (B 35) False)
(= (C 35) False)
(= (safe 36) True)
(= (A 36) True)
(= (B 36) False)
(= (C 36) False)
(= (safe 37) True)
(= (A 37) True)
(= (B 37) False)
(= (C 37) False)
(= (safe 38) True)
(= (A 38) True)
(= (B 38) False)
(= (C 38) False)
(= (safe 39) True)
(= (A 39) True)
(= (B 39) False)
(= (C 39) False)
(= (safe 40) True)
(= (A 40) True)
(= (B 40) False)
(= (C 40) False)
(= (safe 41) True)
(= (A 41) True)
(= (B 41) False)
(= (C 41) False)
(= (safe 42) True)
(= (A 42) True)
(= (B 42) False)
(= (C 42) False)
(= (safe 43) True)
(= (A 43) True)
(= (B 43) False)
(= (C 43) False)
(= (safe 44) True)
(= (A 44) True)
(= (B 44) False)
(= (C 44) False)
(= (safe 45) True)
(= (A 45) True)
(= (B 45) False)
(= (C 45) False)
(= (safe 46) True)
(= (A 46) True)
(= (B 46) False)
(= (C 46) False)
(= (safe 47) True)
(= (A 47) True)
(= (B 47) False)
(= (C 47) False)
(= (safe 48) True)
(= (A 48) True)
(= (B 48) False)
(= (C 48) False)
(= (safe 49) True)
(= (A 49) True)
(= (B 49) False)
(= (C 49) False)
(= (safe 50) True)
(= (A 50) True)
(= (B 50) False)
(= (C 50) False)
(= (safe 51) True)
(= (A 51) True)
(= (B 51) False)
(= (C 51) False)
(= (safe 52) True)
(= (A 52) True)
(= (B 52) False)
(= (C 52) False)
(= (safe 53) True)
(= (A 53) True)
(= (B 53) False)
(= (C 53) False)
(= (safe 54) True)
(= (A 54) True)
(= (B 54) False)
(= (C 54) False)
(= (safe 55) True)
(= (A 55) True)
(= (B 55) False)
(= (C 55) False)
(= (safe 56) True)
(= (A 56) True)
(= (B 56) False)
(= (C 56) False)
(= (safe 57) True)
(= (A 57) True)
(= (B 57) False)
(= (C 57) False)
(= (safe 58) True)
(= (A 58) True)
(= (B 58) False)
(= (C 58) False)
(= (safe 59) True)
(= (A 59) True)
(= (B 59) False)
(= (C 59) False)
(= (safe 60) True)
(= (A 60) True)
(= (B 60) False)
(= (C 60) False)
(= (safe 61) True)
(= (A 61) True)
(= (B 61) False)
(= (C 61) False)
(= (safe 62) True)
(= (A 62) True)
(= (B 62) False)
(= (C 62) False)
(= (safe 63) True)
(= (A 63) True)
(= (B 63) False)
(= (C 63) False)
(= (safe 64) True)
(= (A 64) True)
(= (B 64) False)
(= (C 64) False)
(= (safe 65) True)
(= (A 65) True)
(= (B 65) False)
(= (C 65) False)
(= (safe 66) True)
(= (A 66) True)
(= (B 66) False)
(= (C 66) False)
(= (safe 67) True)
(= (A 67) True)
(= (B 67) False)
(= (C 67) False)
(= (safe 68) True)
(= (A 68) True)
(= (B 68) False)
(= (C 68) False)
(= (safe 69) True)
(= (A 69) True)
(= (B 69) False)
(= (C 69) False)
(= (safe 70) True)
(= (A 70) True)
(= (B 70) False)
(= (C 70) False)
(= (safe 71) True)
(= (A 71) True)
(= (B 71) False)
(= (C 71) False)
(= (safe 72) True)
(= (A 72) True)
(= (B 72) False)
(= (C 72) False)
(= (safe 73) True)
(= (A 73) True)
(= (B 73) False)
(= (C 73) False)
(= (safe 74) True)
(= (A 74) True)
(= (B 74) False)
(= (C 74) False)
(= (safe 75) True)
(= (A 75) True)
(= (B 75) False)
(= (C 75) False)
(= (safe 76) True)
(= (A 76) True)
(= (B 76) False)
(= (C 76) False)
(= (safe 77) True)
(= (A 77) True)
(= (B 77) False)
(= (C 77) False)
(= (safe 78) True)
(= (A 78) True)
(= (B 78) False)
(= (C 78) False)
(= (safe 79) True)
(= (A 79) True)
(= (B 79) False)
(= (C 79) False)
(= (safe 80) True)
(= (A 80) True)
(= (B 80) False)
(= (C 80) False)
(= (safe 81) True)
(= (A 81) True)
(= (B 81) False)
(= (C 81) False)
(= (safe 82) True)
(= (A 82) True)
(= (B 82) False)
(= (C 82) False)
(= (safe 83) True)
(= (A 83) True)
(= (B 83) False)
(= (C 83) False)
(= (safe 84) True)
(= (A 84) True)
(= (B 84) False)
(= (C 84) False)
(= (safe 85) True)
(= (A 85) True)
(= (B 85) False)
(= (C 85) False)
(= (safe 86) True)
(= (A 86) True)
(= (B 86) False)
(= (C 86) False)
(= (safe 87) True)
(= (A 87) True)
(= (B 87) False)
(= (C 87) False)
(= (safe 88) True)
(= (A 88) True)
(= (B 88) False)
(= (C 88) False)
(= (safe 89) True)
(= (A 89) True)
(= (B 89) False)
(= (C 89) False)
(= (safe 90) True)
(= (A 90) True)
(= (B 90) False)
(= (C 90) False)
(= (safe 91) True)
(= (A 91) True)
(= (B 91) False)
(= (C 91) False)
(= (safe 92) True)
(= (A 92) True)
(= (B 92) False)
(= (C 92) False)
(= (safe 93) True)
(= (A 93) True)
(= (B 93) False)
(= (C 93) False)
(= (safe 94) True)
(= (A 94) True)
(= (B 94) False)
(= (C 94) False)
(= (safe 95) True)
(= (A 95) True)
(= (B 95) False)
(= (C 95) False)
(= (safe 96) True)
(= (A 96) True)
(= (B 96) False)
(= (C 96) False)
(= (safe 97) True)
(= (A 97) True)
(= (B 97) False)
(= (C 97) False)
(= (safe 98) True)
(= (A 98) True)
(= (B 98) False)
(= (C 98) False)
(= (safe 99) True)
(= (A 99) True)
(= (B 99) False)
(= (C 99) False)
(= (safe 100) True)
(= (A 100) True)
(= (B 100) False)
(= (C 100) False)
(= (safe 101) True)
(= (A 101) True)
(= (B 101) False)
(= (C 101) False)
(= (safe 102) True)
(= (A 102) True)
(= (B 102) False)
(= (C 102) False)
(= (safe 103) True)
(= (A 103) True)
(= (B 103) False)
(= (C 103) False)
(= (safe 104) True)
(= (A 104) True)
(= (B 104) False)
(= (C 104) False)
(= (safe 105) True)
(= (A 105) True)
(= (B 105) False)
(= (C 105) False)
(= (safe 106) True)
(= (A 106) True)
(= (B 106) False)
(= (C 106) False)
(= (safe 107) True)
(= (A 107) True)
(= (B 107) False)
(= (C 107) False)
(= (safe 108) True)
(= (A 108) True)
(= (B 108) False)
(= (C 108) False)
(= (safe 109) True)
(= (A 109) True)
(= (B 109) False)
(= (C 109) False)
(= (safe 110) True)
(= (A 110) False)
(= (B 110) True)
(= (C 110) False)
(= (safe 111) True)
(= (A 111) False)
(= (B 111) True)
(= (C 111) False)
(= (safe 112) True)
(= (A 112) False)
(= (B 112) True)
(= (C 112) False)
(= (safe 113) True)
(= (A 113) False)
(= (B 113) True)
(= (C 113) False)
(= (safe 114) True)
(= (A 114) False)
(= (B 114) True)
(= (C 114) False)
(= (safe 115) True)
(= (A 115) False)
(= (B 115) True)
(= (C 115) False)
(= (safe 116) True)
(= (A 116) False)
(= (B 116) True)
(= (C 116) False)
(= (safe 117) True)
(= (A 117) False)
(= (B 117) True)
(= (C 117) False)
(= (safe 118) True)
(= (A 118) False)
(= (B 118) True)
(= (C 118) False)
(= (safe 119) True)
(= (A 119) False)
(= (B 119) True)
(= (C 119) False)
(= (safe 120) True)
(= (A 120) False)
(= (B 120) True)
(= (C 120) False)
(= (safe 121) True)
(= (A 121) False)
(= (B 121) True)
(= (C 121) False)
(= (safe 122) True)
(= (A 122) False)
(= (B 122) True)
(= (C 122) False)
(= (safe 123) True)
(= (A 123) False)
(= (B 123) True)
(= (C 123) False)
(= (safe 124) True)
(= (A 124) False)
(= (B 124) True)
(= (C 124) False)
(= (safe 125) True)
(= (A 125) False)
(= (B 125) True)
(= (C 125) False)
(= (safe 126) True)
(= (A 126) False)
(= (B 126) True)
(= (C 126) False)
(= (safe 127) True)
(= (A 127) False)
(= (B 127) True)
(= (C 127) False)
(= (safe 128) True)
(= (A 128) False)
(= (B 128) True)
(= (C 128) False)
(= (safe 129) True)
(= (A 129) False)
(= (B 129) True)
(= (C 129) False)
(= (safe 130) True)
(= (A 130) False)
(= (B 130) True)
(= (C 130) False)
(= (safe 131) True)
(= (A 131) False)
(= (B 131) True)
(= (C 131) False)
(= (safe 132) True)
(= (A 132) False)
(= (B 132) True)
(= (C 132) False)
(= (safe 133) True)
(= (A 133) False)
(= (B 133) True)
(= (C 133) False)
(= (safe 134) True)
(= (A 134) False)
(= (B 134) True)
(= (C 134) False)
(= (safe 135) False)
(= (A 135) False)
(= (B 135) True)
(= (C 135) False)
(= (safe 136) False)
(= (A 136) False)
(= (B 136) True)
(= (C 136) False)
(= (safe 137) False)
(= (A 137) False)
(= (B 137) True)
(= (C 137) False)
(= (safe 138) False)
(= (A 138) False)
(= (B 138) True)
(= (C 138) False)
(= (safe 139) False)
(= (A 139) False)
(= (B 139) True)
(= (C 139) False)
(= (safe 140) False)
(= (A 140) False)
(= (B 140) True)
(= (C 140) False)
(= (safe 141) False)
(= (A 141) False)
(= (B 141) False)
(= (C 141) True)
(= (safe 142) False)
(= (A 142) False)
(= (B 142) False)
(= (C 142) True)
(= (safe 143) False)
(= (A 143) False)
(= (B 143) False)
(= (C 143) True)
(= (safe 144) False)
(= (A 144) False)
(= (B 144) False)
(= (C 144) True)
(= (safe 145) False)
(= (A 145) False)
(= (B 145) False)
(= (C 145) True)
(= (safe 146) False)
(= (A 146) False)
(= (B 146) False)
(= (C 146) True)
(= (safe 147) False)
(= (A 147) False)
(= (B 147) False)
(= (C 147) True)
(= (safe 148) False)
(= (A 148) False)
(= (B 148) False)
(= (C 148) True)
(= (safe 149) False)
(= (A 149) False)
(= (B 149) False)
(= (C 149) True)
(= (safe 150) False)
(= (A 150) False)
(= (B 150) False)
(= (C 150) True)
(= (safe 151) False)
(= (A 151) False)
(= (B 151) False)
(= (C 151) True)
(= (safe 152) False)
(= (A 152) False)
(= (B 152) False)
(= (C 152) True)
(= (safe 153) False)
(= (A 153) False)
(= (B 153) False)
(= (C 153) True)
(= (safe 154) False)
(= (A 154) False)
(= (B 154) False)
(= (C 154) True)
(= (safe 155) False)
(= (A 155) False)
(= (B 155) False)
(= (C 155) True)
(= (safe 156) False)
(= (A 156) False)
(= (B 156) False)
(= (C 156) True)
(= (safe 157) False)
(= (A 157) False)
(= (B 157) False)
(= (C 157) True)
(= (safe 158) False)
(= (A 158) False)
(= (B 158) False)
(= (C 158) True)
(= (safe 159) False)
(= (A 159) False)
(= (B 159) False)
(= (C 159) True)
(= (safe 160) False)
(= (A 160) False)
(= (B 160) False)
(= (C 160) True)
(= (safe 161) False)
(= (A 161) False)
(= (B 161) False)
(= (C 161) True)
(= (safe 162) False)
(= (A 162) False)
(= (B 162) False)
(= (C 162) True)
(= (safe 163) False)
(= (A 163) False)
(= (B 163) False)
(= (C 163) True)
(= (safe 164) False)
(= (A 164) False)
(= (B 164) False)
(= (C 164) True)
(= (safe 165) False)
(= (A 165) False)
(= (B 165) False)
(= (C 165) True)
(= (safe 166) False)
(= (A 166) False)
(= (B 166) False)
(= (C 166) True)
(= (safe 167) False)
(= (A 167) False)
(= (B 167) False)
(= (C 167) True)
(= (safe 168) True)
(= (A 168) False)
(= (B 168) False)
(= (C 168) True)
(= (safe 169) True)
(= (A 169) False)
(= (B 169) False)
(= (C 169) True)
(= (safe 170) True)
(= (A 170) False)
(= (B 170) False)
(= (C 170) True)
(= (safe 171) True)
(= (A 171) False)
(= (B 171) False)
(= (C 171) True)
(= (safe 172) True)
(= (A 172) False)
(= (B 172) False)
(= (C 172) True)
(= (safe 173) True)
(= (A 173) False)
(= (B 173) False)
(= (C 173) True)
(= (safe 174) True)
(= (A 174) False)
(= (B 174) False)
(= (C 174) True)
(= (safe 175) True)
(= (A 175) False)
(= (B 175) False)
(= (C 175) True)
(= (safe 176) True)
(= (A 176) False)
(= (B 176) False)
(= (C 176) True)
(= (safe 177) True)
(= (A 177) False)
(= (B 177) False)
(= (C 177) True)
(= (safe 178) True)
(= (A 178) False)
(= (B 178) False)
(= (C 178) True)
(= (safe 179) True)
(= (A 179) False)
(= (B 179) False)
(= (C 179) True)





(= (safeA $t) (∧ (A $t) (safe $t)))
(= (safeB $t) (∧ (B $t) (safe $t)))

(= (∧TV ($pp1 $ptotal1) ($pp2 $ptotal2))
   ((collapse (Tintersection $pp1 $pp2))
    (TuniqueUnion $ptotal1 $ptotal2)))

;!(𝒰TV safeA safeB from 0 to 9 at 0)
;!(□TV safeA from 0 to 9 at 0)
;!(□TV safeB from 0 to 9 at 0)

;!(∧TV (□TV A from 0 to 179 at 0) (□TV B from 0 to 179 at 0))
;!(∧TV (𝒰TV A B from 0 to 179 at 0) (□TV safe from 0 to 9 at 0))

;!(next)

;todo in mettamorph
;(= (intersection $a $a) $a)

(= (TupleCount $tuple) (If (== $tuple ()) 0 (+ 1 (TupleCount (cdr-atom $tuple)))))

;!(𝒰TV safeA safeB from 0 to 9 at 0)
;;safeB is fulfilled in t=6 for first time, however A does not hold so safeA does not
;;meaning 0, 2, 4 is positive evidence (safe and A), and 7, 8, 9 despite 7 and 9 not being safe
;!(∧TV (𝒰TV A B from 0 to 9 at 0) (□TV safe from 0 to 9 at 0))
;;here 0, 2, 4 is positive evidence, and 8.
;;Additionally 6 is positive evidence, as 6 is safe, and B is fulfilled at 5 already

(= (Truth_fromSets ($P $T))
   (Truth_w2TV (TupleCount $P) (TupleCount $T)))

;(= (BC) (𝒰 B C from 0 to 179 at 0))
;(= (nestedABC) (𝒰 A nestedBC from 0 to 179 at 0))

;!(Truth_fromSets (𝒰TV safeA safeB from 0 to 9 at 0))
;!(∧TV (□TV safe from 0 to 179 at 0) (∧TV (𝒰TV A B from 0 to 179 at 0) (𝒰TV B C from 0 to 179 at 0)))
;!(Truth_fromSets (∧TV (□TV safe from 0 to 179 at 0) (∧TV (𝒰TV A B from 0 to 179 at 0) (𝒰TV B C from 0 to 179 at 0))))

!(Truth_fromSets (∧TV (□TV safe from 0 to 179 at 0) (∧TV (𝒰TV A B from 0 to 179 at 0) (𝒰TV B C from 0 to 179 at 0))))


;!(union (superpose (1 2 3)) (superpose (4 5 6)))

;!(unique (superpose ((1 2 3) 1 2 3 3 3)))

;!(case (match &self wuza wuza)
;       ((apple test)
;        (Empty wu)))

;!(test 42)

;!(car-atom ())
